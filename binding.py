# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_middlebox_ietf_nile__nile_intent_middlebox(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-nile - based on the path /nile/intent/middlebox. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'middlebox'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['nile', 'intent', 'middlebox']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /nile/intent/middlebox/name (string)

    YANG Description: The name of the middlebox type
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /nile/intent/middlebox/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of the middlebox type
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_period_ietf_nile__nile_intent_period(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-nile - based on the path /nile/intent/period. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__start','__to',)

  _yang_name = 'period'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__start = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.\\d+)?(Z|[\\+\\-]((1[0-3]|0[0-9]):([0-5][0-9])|14:00))?'}), is_leaf=True, yang_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-yang-types:date-and-time', is_config=True)
    self.__to = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.\\d+)?(Z|[\\+\\-]((1[0-3]|0[0-9]):([0-5][0-9])|14:00))?'}), is_leaf=True, yang_name="to", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-yang-types:date-and-time', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['nile', 'intent', 'period']

  def _get_start(self):
    """
    Getter method for start, mapped from YANG variable /nile/intent/period/start (ietf-yang-types:date-and-time)

    YANG Description: start time of an intent
    """
    return self.__start
      
  def _set_start(self, v, load=False):
    """
    Setter method for start, mapped from YANG variable /nile/intent/period/start (ietf-yang-types:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start() directly.

    YANG Description: start time of an intent
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.\\d+)?(Z|[\\+\\-]((1[0-3]|0[0-9]):([0-5][0-9])|14:00))?'}), is_leaf=True, yang_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-yang-types:date-and-time', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start must be of a type compatible with ietf-yang-types:date-and-time""",
          'defined-type': "ietf-yang-types:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.\\d+)?(Z|[\\+\\-]((1[0-3]|0[0-9]):([0-5][0-9])|14:00))?'}), is_leaf=True, yang_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-yang-types:date-and-time', is_config=True)""",
        })

    self.__start = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start(self):
    self.__start = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.\\d+)?(Z|[\\+\\-]((1[0-3]|0[0-9]):([0-5][0-9])|14:00))?'}), is_leaf=True, yang_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-yang-types:date-and-time', is_config=True)


  def _get_to(self):
    """
    Getter method for to, mapped from YANG variable /nile/intent/period/to (ietf-yang-types:date-and-time)

    YANG Description: start time of an intent
    """
    return self.__to
      
  def _set_to(self, v, load=False):
    """
    Setter method for to, mapped from YANG variable /nile/intent/period/to (ietf-yang-types:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_to is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_to() directly.

    YANG Description: start time of an intent
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.\\d+)?(Z|[\\+\\-]((1[0-3]|0[0-9]):([0-5][0-9])|14:00))?'}), is_leaf=True, yang_name="to", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-yang-types:date-and-time', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """to must be of a type compatible with ietf-yang-types:date-and-time""",
          'defined-type': "ietf-yang-types:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.\\d+)?(Z|[\\+\\-]((1[0-3]|0[0-9]):([0-5][0-9])|14:00))?'}), is_leaf=True, yang_name="to", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-yang-types:date-and-time', is_config=True)""",
        })

    self.__to = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_to(self):
    self.__to = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.\\d+)?(Z|[\\+\\-]((1[0-3]|0[0-9]):([0-5][0-9])|14:00))?'}), is_leaf=True, yang_name="to", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-yang-types:date-and-time', is_config=True)

  start = __builtin__.property(_get_start, _set_start)
  to = __builtin__.property(_get_to, _set_to)


  _pyangbind_elements = OrderedDict([('start', start), ('to', to), ])


class yc_location_ietf_nile__nile_intent_location(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-nile - based on the path /nile/intent/location. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__from_','__to',)

  _yang_name = 'location'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__from_ = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-inet-types:ipv4-prefix', is_config=True)
    self.__to = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="to", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-inet-types:ipv4-prefix', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['nile', 'intent', 'location']

  def _get_from_(self):
    """
    Getter method for from_, mapped from YANG variable /nile/intent/location/from (ietf-inet-types:ipv4-prefix)

    YANG Description: network endpoint
    """
    return self.__from_
      
  def _set_from_(self, v, load=False):
    """
    Setter method for from_, mapped from YANG variable /nile/intent/location/from (ietf-inet-types:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_from_ is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_from_() directly.

    YANG Description: network endpoint
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-inet-types:ipv4-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """from_ must be of a type compatible with ietf-inet-types:ipv4-prefix""",
          'defined-type': "ietf-inet-types:ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-inet-types:ipv4-prefix', is_config=True)""",
        })

    self.__from_ = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_from_(self):
    self.__from_ = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-inet-types:ipv4-prefix', is_config=True)


  def _get_to(self):
    """
    Getter method for to, mapped from YANG variable /nile/intent/location/to (ietf-inet-types:ipv4-prefix)

    YANG Description: network endpoint
    """
    return self.__to
      
  def _set_to(self, v, load=False):
    """
    Setter method for to, mapped from YANG variable /nile/intent/location/to (ietf-inet-types:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_to is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_to() directly.

    YANG Description: network endpoint
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="to", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-inet-types:ipv4-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """to must be of a type compatible with ietf-inet-types:ipv4-prefix""",
          'defined-type': "ietf-inet-types:ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="to", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-inet-types:ipv4-prefix', is_config=True)""",
        })

    self.__to = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_to(self):
    self.__to = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="to", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='ietf-inet-types:ipv4-prefix', is_config=True)

  from_ = __builtin__.property(_get_from_, _set_from_)
  to = __builtin__.property(_get_to, _set_to)


  _pyangbind_elements = OrderedDict([('from_', from_), ('to', to), ])


class yc_actions_ietf_nile__nile_intent_actions(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-nile - based on the path /nile/intent/actions. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__act',)

  _yang_name = 'actions'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__act = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="act", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['nile', 'intent', 'actions']

  def _get_act(self):
    """
    Getter method for act, mapped from YANG variable /nile/intent/actions/act (string)
    """
    return self.__act
      
  def _set_act(self, v, load=False):
    """
    Setter method for act, mapped from YANG variable /nile/intent/actions/act (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_act is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_act() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="act", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """act must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="act", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)""",
        })

    self.__act = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_act(self):
    self.__act = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="act", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)

  act = __builtin__.property(_get_act, _set_act)


  _pyangbind_elements = OrderedDict([('act', act), ])


class yc_targets_ietf_nile__nile_intent_targets(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-nile - based on the path /nile/intent/targets. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__target',)

  _yang_name = 'targets'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__target = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['nile', 'intent', 'targets']

  def _get_target(self):
    """
    Getter method for target, mapped from YANG variable /nile/intent/targets/target (string)
    """
    return self.__target
      
  def _set_target(self, v, load=False):
    """
    Setter method for target, mapped from YANG variable /nile/intent/targets/target (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_target is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_target() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """target must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)""",
        })

    self.__target = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_target(self):
    self.__target = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="target", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)

  target = __builtin__.property(_get_target, _set_target)


  _pyangbind_elements = OrderedDict([('target', target), ])


class yc_netpath_ietf_nile__nile_intent_netpath(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-nile - based on the path /nile/intent/netpath. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__switch',)

  _yang_name = 'netpath'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__switch = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="switch", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['nile', 'intent', 'netpath']

  def _get_switch(self):
    """
    Getter method for switch, mapped from YANG variable /nile/intent/netpath/switch (string)
    """
    return self.__switch
      
  def _set_switch(self, v, load=False):
    """
    Setter method for switch, mapped from YANG variable /nile/intent/netpath/switch (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_switch is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_switch() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="switch", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """switch must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="switch", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)""",
        })

    self.__switch = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_switch(self):
    self.__switch = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="switch", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)

  switch = __builtin__.property(_get_switch, _set_switch)


  _pyangbind_elements = OrderedDict([('switch', switch), ])


class yc_intent_ietf_nile__nile_intent(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-nile - based on the path /nile/intent. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__middlebox','__period','__location','__actions','__targets','__netpath',)

  _yang_name = 'intent'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)
    self.__middlebox = YANGDynClass(base=YANGListType("name",yc_middlebox_ietf_nile__nile_intent_middlebox, yang_name="middlebox", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="middlebox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    self.__period = YANGDynClass(base=YANGListType("start to",yc_period_ietf_nile__nile_intent_period, yang_name="period", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='start to', extensions=None), is_container='list', yang_name="period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    self.__location = YANGDynClass(base=YANGListType("from to",yc_location_ietf_nile__nile_intent_location, yang_name="location", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='from to', extensions=None), is_container='list', yang_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    self.__actions = YANGDynClass(base=YANGListType("act",yc_actions_ietf_nile__nile_intent_actions, yang_name="actions", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='act', extensions=None), is_container='list', yang_name="actions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    self.__targets = YANGDynClass(base=YANGListType("target",yc_targets_ietf_nile__nile_intent_targets, yang_name="targets", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='target', extensions=None), is_container='list', yang_name="targets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    self.__netpath = YANGDynClass(base=YANGListType("switch",yc_netpath_ietf_nile__nile_intent_netpath, yang_name="netpath", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='switch', extensions=None), is_container='list', yang_name="netpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['nile', 'intent']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /nile/intent/name (string)

    YANG Description: intent name
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /nile/intent/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: intent name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='string', is_config=True)


  def _get_middlebox(self):
    """
    Getter method for middlebox, mapped from YANG variable /nile/intent/middlebox (list)
    """
    return self.__middlebox
      
  def _set_middlebox(self, v, load=False):
    """
    Setter method for middlebox, mapped from YANG variable /nile/intent/middlebox (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_middlebox is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_middlebox() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_middlebox_ietf_nile__nile_intent_middlebox, yang_name="middlebox", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="middlebox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """middlebox must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_middlebox_ietf_nile__nile_intent_middlebox, yang_name="middlebox", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="middlebox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)""",
        })

    self.__middlebox = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_middlebox(self):
    self.__middlebox = YANGDynClass(base=YANGListType("name",yc_middlebox_ietf_nile__nile_intent_middlebox, yang_name="middlebox", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="middlebox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)


  def _get_period(self):
    """
    Getter method for period, mapped from YANG variable /nile/intent/period (list)
    """
    return self.__period
      
  def _set_period(self, v, load=False):
    """
    Setter method for period, mapped from YANG variable /nile/intent/period (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_period is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_period() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("start to",yc_period_ietf_nile__nile_intent_period, yang_name="period", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='start to', extensions=None), is_container='list', yang_name="period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """period must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("start to",yc_period_ietf_nile__nile_intent_period, yang_name="period", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='start to', extensions=None), is_container='list', yang_name="period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)""",
        })

    self.__period = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_period(self):
    self.__period = YANGDynClass(base=YANGListType("start to",yc_period_ietf_nile__nile_intent_period, yang_name="period", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='start to', extensions=None), is_container='list', yang_name="period", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)


  def _get_location(self):
    """
    Getter method for location, mapped from YANG variable /nile/intent/location (list)
    """
    return self.__location
      
  def _set_location(self, v, load=False):
    """
    Setter method for location, mapped from YANG variable /nile/intent/location (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_location is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_location() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("from to",yc_location_ietf_nile__nile_intent_location, yang_name="location", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='from to', extensions=None), is_container='list', yang_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """location must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("from to",yc_location_ietf_nile__nile_intent_location, yang_name="location", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='from to', extensions=None), is_container='list', yang_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)""",
        })

    self.__location = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_location(self):
    self.__location = YANGDynClass(base=YANGListType("from to",yc_location_ietf_nile__nile_intent_location, yang_name="location", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='from to', extensions=None), is_container='list', yang_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)


  def _get_actions(self):
    """
    Getter method for actions, mapped from YANG variable /nile/intent/actions (list)
    """
    return self.__actions
      
  def _set_actions(self, v, load=False):
    """
    Setter method for actions, mapped from YANG variable /nile/intent/actions (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_actions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_actions() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("act",yc_actions_ietf_nile__nile_intent_actions, yang_name="actions", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='act', extensions=None), is_container='list', yang_name="actions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """actions must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("act",yc_actions_ietf_nile__nile_intent_actions, yang_name="actions", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='act', extensions=None), is_container='list', yang_name="actions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)""",
        })

    self.__actions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_actions(self):
    self.__actions = YANGDynClass(base=YANGListType("act",yc_actions_ietf_nile__nile_intent_actions, yang_name="actions", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='act', extensions=None), is_container='list', yang_name="actions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)


  def _get_targets(self):
    """
    Getter method for targets, mapped from YANG variable /nile/intent/targets (list)
    """
    return self.__targets
      
  def _set_targets(self, v, load=False):
    """
    Setter method for targets, mapped from YANG variable /nile/intent/targets (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_targets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_targets() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("target",yc_targets_ietf_nile__nile_intent_targets, yang_name="targets", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='target', extensions=None), is_container='list', yang_name="targets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """targets must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("target",yc_targets_ietf_nile__nile_intent_targets, yang_name="targets", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='target', extensions=None), is_container='list', yang_name="targets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)""",
        })

    self.__targets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_targets(self):
    self.__targets = YANGDynClass(base=YANGListType("target",yc_targets_ietf_nile__nile_intent_targets, yang_name="targets", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='target', extensions=None), is_container='list', yang_name="targets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)


  def _get_netpath(self):
    """
    Getter method for netpath, mapped from YANG variable /nile/intent/netpath (list)
    """
    return self.__netpath
      
  def _set_netpath(self, v, load=False):
    """
    Setter method for netpath, mapped from YANG variable /nile/intent/netpath (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_netpath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_netpath() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("switch",yc_netpath_ietf_nile__nile_intent_netpath, yang_name="netpath", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='switch', extensions=None), is_container='list', yang_name="netpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """netpath must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("switch",yc_netpath_ietf_nile__nile_intent_netpath, yang_name="netpath", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='switch', extensions=None), is_container='list', yang_name="netpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)""",
        })

    self.__netpath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_netpath(self):
    self.__netpath = YANGDynClass(base=YANGListType("switch",yc_netpath_ietf_nile__nile_intent_netpath, yang_name="netpath", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='switch', extensions=None), is_container='list', yang_name="netpath", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  middlebox = __builtin__.property(_get_middlebox, _set_middlebox)
  period = __builtin__.property(_get_period, _set_period)
  location = __builtin__.property(_get_location, _set_location)
  actions = __builtin__.property(_get_actions, _set_actions)
  targets = __builtin__.property(_get_targets, _set_targets)
  netpath = __builtin__.property(_get_netpath, _set_netpath)


  _pyangbind_elements = OrderedDict([('name', name), ('middlebox', middlebox), ('period', period), ('location', location), ('actions', actions), ('targets', targets), ('netpath', netpath), ])


class yc_nile_ietf_nile__nile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-nile - based on the path /nile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__intent',)

  _yang_name = 'nile'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__intent = YANGDynClass(base=YANGListType("name",yc_intent_ietf_nile__nile_intent, yang_name="intent", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="intent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['nile']

  def _get_intent(self):
    """
    Getter method for intent, mapped from YANG variable /nile/intent (list)
    """
    return self.__intent
      
  def _set_intent(self, v, load=False):
    """
    Setter method for intent, mapped from YANG variable /nile/intent (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_intent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_intent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_intent_ietf_nile__nile_intent, yang_name="intent", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="intent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """intent must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_intent_ietf_nile__nile_intent, yang_name="intent", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="intent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)""",
        })

    self.__intent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_intent(self):
    self.__intent = YANGDynClass(base=YANGListType("name",yc_intent_ietf_nile__nile_intent, yang_name="intent", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="intent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='list', is_config=True)

  intent = __builtin__.property(_get_intent, _set_intent)


  _pyangbind_elements = OrderedDict([('intent', intent), ])


class ietf_nile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-nile - based on the path /ietf-nile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A YANG model for the nile language extesions develop for the NG-CDI project
  """
  __slots__ = ('_path_helper', '_extmethods', '__nile',)

  _yang_name = 'ietf-nile'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__nile = YANGDynClass(base=yc_nile_ietf_nile__nile, is_container='container', yang_name="nile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_nile(self):
    """
    Getter method for nile, mapped from YANG variable /nile (container)
    """
    return self.__nile
      
  def _set_nile(self, v, load=False):
    """
    Setter method for nile, mapped from YANG variable /nile (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nile() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_nile_ietf_nile__nile, is_container='container', yang_name="nile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nile must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_nile_ietf_nile__nile, is_container='container', yang_name="nile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='container', is_config=True)""",
        })

    self.__nile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nile(self):
    self.__nile = YANGDynClass(base=yc_nile_ietf_nile__nile, is_container='container', yang_name="nile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:nile', defining_module='ietf-nile', yang_type='container', is_config=True)

  nile = __builtin__.property(_get_nile, _set_nile)


  _pyangbind_elements = OrderedDict([('nile', nile), ])


